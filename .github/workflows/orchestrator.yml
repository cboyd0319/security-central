name: Security Central Orchestrator

on:
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:
    inputs:
      target_repo:
        description: 'Target specific repo (or "all")'
        required: false
        default: 'all'
      force_full_scan:
        description: 'Force full scan (ignore cache)'
        type: boolean
        default: false

permissions:
  contents: write
  security-events: write
  issues: write
  pull-requests: write

jobs:
  orchestrate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo: [PyGuard, BazBOM, PoshGuard, JobSentinel]
      fail-fast: false
      max-parallel: 4
    
    steps:
      - name: Checkout Security Central
        uses: actions/checkout@v4
        with:
          repository: cboyd0319/security-central
          path: security-central
          
      - name: Checkout Target Repo
        uses: actions/checkout@v4
        with:
          repository: cboyd0319/${{ matrix.repo }}
          path: ${{ matrix.repo }}
          token: ${{ secrets.GH_PAT }}
          
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          
      - name: Install Dependencies
        run: |
          pip install -r security-central/requirements.txt
          pip install pyguard bandit semgrep ruff
          
      - name: Determine Scan Type
        id: scan-type
        run: |
          cd ${{ matrix.repo }}
          LANGUAGES=$(python ../security-central/scripts/detect_languages.py)
          echo "languages=$LANGUAGES" >> $GITHUB_OUTPUT
          
      - name: Scan Python Code
        if: contains(steps.scan-type.outputs.languages, 'python')
        uses: ./security-central/.github/actions/scan-python
        with:
          repo_path: ${{ matrix.repo }}
          
      - name: Scan PowerShell Code
        if: contains(steps.scan-type.outputs.languages, 'powershell')
        uses: ./security-central/.github/actions/scan-powershell
        with:
          repo_path: ${{ matrix.repo }}
          
      - name: Generate SBOM
        run: |
          python security-central/scripts/generate_sbom.py \
            --repo ${{ matrix.repo }} \
            --output ${{ matrix.repo }}/sbom.json
            
      - name: Analyze Findings
        id: analyze
        run: |
          python security-central/scripts/analyze_findings.py \
            --sarif ${{ matrix.repo }}/aggregated.sarif \
            --output findings-summary.json
            
      - name: Create Issues for Critical Findings
        if: steps.analyze.outputs.critical_count > 0
        run: |
          python security-central/scripts/create_issues.py \
            --repo cboyd0319/${{ matrix.repo }} \
            --findings findings-summary.json \
            --severity critical
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          
      - name: Auto-Fix if Enabled
        if: steps.analyze.outputs.auto_fixable > 0
        run: |
          python security-central/scripts/auto_fix.py \
            --repo ${{ matrix.repo }} \
            --findings findings-summary.json \
            --create-pr
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          
      - name: Notify Slack
        if: always()
        run: |
          python security-central/scripts/notify.py \
            --channel security-alerts \
            --repo ${{ matrix.repo }} \
            --status ${{ job.status }} \
            --findings findings-summary.json
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          
      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.repo }}-scan-results
          path: |
            ${{ matrix.repo }}/aggregated.sarif
            findings-summary.json
            ${{ matrix.repo }}/sbom.json
