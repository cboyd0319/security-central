name: Security Central Orchestrator

on:
  schedule:
    - cron: '0 9 * * *'  # Daily at 9 AM UTC (aligned with repos.yml)
  workflow_dispatch:

permissions:
  contents: write
  security-events: write
  issues: write
  pull-requests: write

jobs:
  orchestrate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo: [PyGuard, BazBOM, PoshGuard, JobSentinel]
      fail-fast: false
      max-parallel: 4
    
    steps:
      # ❌ NO TOKEN NEEDED - just checking out Security Central
      - name: Checkout Security Central
        uses: actions/checkout@v5
        with:
          repository: cboyd0319/security-central
          path: security-central
          
      # ✅ GENERATE TOKEN ONCE (use for everything below)
      - name: Generate App Token
        id: app-token
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PRIVATE_KEY }}
          repositories: |
            security-central
            PyGuard
            BazBOM
            PoshGuard
            JobSentinel
          
      # ✅ TOKEN NEEDED - accessing private/managed repo
      - name: Checkout Target Repo
        uses: actions/checkout@v5
        with:
          repository: cboyd0319/${{ matrix.repo }}
          path: ${{ matrix.repo }}
          token: ${{ steps.app-token.outputs.token }}  # ← HERE
          
      # ❌ NO TOKEN NEEDED - just installing packages
      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'
          
      # ❌ NO TOKEN NEEDED - local pip install
      - name: Install Dependencies
        run: |
          pip install -r security-central/requirements.txt
          pip install pyguard bandit semgrep ruff
          
      # ❌ NO TOKEN NEEDED - runs locally
      - name: Detect Languages
        id: scan-type
        run: |
          cd ${{ matrix.repo }}
          LANGUAGES=$(python ../security-central/scripts/detect_languages.py)
          echo "languages=$LANGUAGES" >> $GITHUB_OUTPUT
          
      # ❌ NO TOKEN NEEDED - local scanning
      - name: Run PyGuard
        if: contains(steps.scan-type.outputs.languages, 'python')
        run: |
          cd ${{ matrix.repo }}
          pyguard . --scan-only --sarif --no-html
          
      # ❌ NO TOKEN NEEDED - local scanning
      - name: Run Bandit
        if: contains(steps.scan-type.outputs.languages, 'python')
        run: |
          cd ${{ matrix.repo }}
          bandit -r . -f sarif -o bandit-report.sarif || true
          
      # ❌ NO TOKEN NEEDED - local file operations
      - name: Generate SBOM
        run: |
          python security-central/scripts/generate_sbom.py \
            --repo ${{ matrix.repo }} \
            --output ${{ matrix.repo }}/sbom.json
            
      # ❌ NO TOKEN NEEDED - local analysis
      - name: Analyze Findings
        id: analyze
        run: |
          python security-central/scripts/analyze_findings.py \
            --sarif ${{ matrix.repo }}/aggregated.sarif \
            --output findings-summary.json
            
      # ✅ TOKEN NEEDED - creating GitHub issues via API
      - name: Create Issues for Critical Findings
        if: steps.analyze.outputs.critical_count > 0
        run: |
          python security-central/scripts/create_issues.py \
            --repo cboyd0319/${{ matrix.repo }} \
            --findings findings-summary.json \
            --severity critical
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}  # ← HERE
          
      # ✅ TOKEN NEEDED - pushing changes & creating PRs
      - name: Auto-Fix if Enabled
        if: steps.analyze.outputs.auto_fixable > 0
        run: |
          python security-central/scripts/auto_fix.py \
            --repo ${{ matrix.repo }} \
            --findings findings-summary.json \
            --create-pr
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}  # ← HERE
          
      # ✅ TOKEN NEEDED - uploading to GitHub Security tab
      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v4
        with:
          sarif_file: ${{ matrix.repo }}/aggregated.sarif
          category: ${{ matrix.repo }}-security-scan
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}  # ← HERE
          
      # ❌ NO TOKEN NEEDED - external webhook (Slack)
      - name: Notify Slack
        if: always()
        run: |
          python security-central/scripts/notify.py \
            --channel security-alerts \
            --repo ${{ matrix.repo }} \
            --status ${{ job.status }} \
            --findings findings-summary.json
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_SECURITY_WEBHOOK }}
          
      # ❌ NO TOKEN NEEDED - just uploading files
      - name: Upload Artifacts
        if: always()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: ${{ matrix.repo }}-scan-results
          path: |
            ${{ matrix.repo }}/aggregated.sarif
            findings-summary.json