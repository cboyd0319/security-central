name: Daily Security Scan

on:
  schedule:
    - cron: '0 9 * * *'  # 9 AM UTC daily
  workflow_dispatch:      # Manual trigger
    inputs:
      force_scan_all:
        description: 'Force scan all repos (ignore cache)'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  scan-all-repos:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout security-central
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install pyyaml requests safety pip-audit bandit semgrep

      - name: Install additional tools
        run: |
          # OSV Scanner
          curl -LO https://github.com/google/osv-scanner/releases/latest/download/osv-scanner_linux_amd64
          chmod +x osv-scanner_linux_amd64
          sudo mv osv-scanner_linux_amd64 /usr/local/bin/osv-scanner

          # OWASP Dependency-Check (for Java/JVM)
          curl -LO https://github.com/jeremylong/DependencyCheck/releases/download/v9.0.9/dependency-check-9.0.9-release.zip
          unzip dependency-check-9.0.9-release.zip
          sudo mv dependency-check /opt/

      - name: Clone all monitored repositories
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python scripts/clone_repos.py

      - name: Run security scans
        id: scan
        run: |
          python scripts/scan_all_repos.py \
            --output findings.json \
            --sarif findings.sarif

      - name: Analyze and triage findings
        id: triage
        run: |
          python scripts/analyze_risk.py \
            findings.json \
            --output triage.json

          # Set outputs for next steps
          CRITICAL=$(jq '.summary.critical_count' triage.json)
          HIGH=$(jq '.summary.high_count' triage.json)

          echo "critical_count=$CRITICAL" >> $GITHUB_OUTPUT
          echo "high_count=$HIGH" >> $GITHUB_OUTPUT

      - name: Create automated security PRs
        if: steps.triage.outputs.critical_count > 0 || steps.triage.outputs.high_count > 0
        env:
          GH_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
        run: |
          if [ -z "$GH_TOKEN" ]; then
            echo "‚ö†Ô∏è  REPO_ACCESS_TOKEN not set - skipping PR creation"
            echo "   This is expected during initial setup. To enable PR creation:"
            echo "   1. Create a Personal Access Token with 'repo' and 'workflow' scopes"
            echo "   2. Add it as REPO_ACCESS_TOKEN secret in repository settings"
          else
            python scripts/create_patch_prs.py \
              triage.json \
              --auto-merge-safe-only
          fi

      - name: Generate security report
        run: |
          python scripts/generate_report.py \
            triage.json \
            --output docs/reports/$(date +%Y-%m-%d)-security-report.md

      - name: Commit daily report
        run: |
          git config user.name "Security Bot"
          git config user.email "security-bot@github.com"
          git add docs/reports/
          git commit -m "chore: daily security report $(date +%Y-%m-%d)" || true
          git push || true

      - name: Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v4
        if: always()
        with:
          sarif_file: findings.sarif

      - name: Send Slack notification
        if: steps.triage.outputs.critical_count > 0 || steps.triage.outputs.high_count > 0
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_SECURITY_WEBHOOK }}
        run: |
          if [ -z "$SLACK_WEBHOOK" ]; then
            echo "‚ö†Ô∏è  SLACK_SECURITY_WEBHOOK not set - skipping Slack notification"
            echo "   To enable Slack notifications, add SLACK_SECURITY_WEBHOOK secret"
            exit 0
          fi
          
          CRITICAL=${{ steps.triage.outputs.critical_count }}
          HIGH=${{ steps.triage.outputs.high_count }}

          EMOJI="‚ö†Ô∏è"
          if [ "$CRITICAL" -gt 0 ]; then
            EMOJI="üö®"
          fi

          curl -X POST "$SLACK_WEBHOOK" \
            -H "Content-Type: application/json" \
            -d "{
              \"text\": \"$EMOJI Security Scan Results\",
              \"blocks\": [
                {
                  \"type\": \"section\",
                  \"text\": {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*Daily Security Scan Complete*\n‚Ä¢ CRITICAL: $CRITICAL\n‚Ä¢ HIGH: $HIGH\n\n<https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Details>\"
                  }
                }
              ]
            }"

      - name: Send PagerDuty alert for critical issues
        if: steps.triage.outputs.critical_count > 0
        env:
          PAGERDUTY_KEY: ${{ secrets.PAGERDUTY_INTEGRATION_KEY }}
        run: |
          if [ -n "$PAGERDUTY_KEY" ]; then
            python scripts/send_pagerduty_alert.py \
              --severity critical \
              --count ${{ steps.triage.outputs.critical_count }}
          fi

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4.6.2
        with:
          name: security-scan-results-${{ github.run_id }}
          path: |
            findings.json
            triage.json
            findings.sarif
          retention-days: 90
