name: Emergency Security Response

on:
  repository_dispatch:
    types: [critical_cve]
  workflow_dispatch:
    inputs:
      cve:
        description: 'CVE ID (e.g., CVE-2024-12345)'
        required: true
        type: string
      affected_package:
        description: 'Affected package name'
        required: true
        type: string
      severity:
        description: 'Severity level'
        required: true
        type: choice
        options:
          - CRITICAL
          - HIGH
          - MEDIUM

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  emergency-response:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements-prod.txt
          pip install jinja2

      - name: Assess impact across all repos
        id: assess
        env:
          CVE: ${{ github.event.inputs.cve || github.event.client_payload.cve }}
          PACKAGE: ${{ github.event.inputs.affected_package || github.event.client_payload.package }}
        run: |
          python scripts/emergency_assess.py \
            --cve "$CVE" \
            --package "$PACKAGE" \
            --output impact-assessment.json

          AFFECTED=$(jq '.affected_repos | length' impact-assessment.json)
          echo "affected_count=$AFFECTED" >> $GITHUB_OUTPUT

      - name: Create emergency patches
        if: steps.assess.outputs.affected_count > 0
        env:
          GH_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
          CVE: ${{ github.event.inputs.cve || github.event.client_payload.cve }}
        run: |
          python scripts/bulk_patch.py \
            impact-assessment.json \
            --cve "$CVE" \
            --emergency-mode \
            --auto-merge

      - name: Send CRITICAL alert
        if: github.event.inputs.severity == 'CRITICAL' || github.event.client_payload.severity == 'CRITICAL'
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_SECURITY_WEBHOOK }}
          PAGERDUTY_KEY: ${{ secrets.PAGERDUTY_INTEGRATION_KEY }}
          CVE: ${{ github.event.inputs.cve || github.event.client_payload.cve }}
        run: |
          # Slack
          curl -X POST "$SLACK_WEBHOOK" \
            -H "Content-Type: application/json" \
            -d "{
              \"text\": \"ðŸš¨ CRITICAL CVE ALERT: $CVE\",
              \"blocks\": [
                {
                  \"type\": \"section\",
                  \"text\": {
                    \"type\": \"mrkdwn\",
                    \"text\": \"*CRITICAL Security Alert*\n\n*CVE*: $CVE\n*Package*: ${{ github.event.inputs.affected_package }}\n*Affected Repos*: ${{ steps.assess.outputs.affected_count }}\n\nEmergency patches have been automatically created and are being tested.\"
                  }
                },
                {
                  \"type\": \"actions\",
                  \"elements\": [
                    {
                      \"type\": \"button\",
                      \"text\": {
                        \"type\": \"plain_text\",
                        \"text\": \"View Workflow\"
                      },
                      \"url\": \"https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\"
                    }
                  ]
                }
              ]
            }"

          # PagerDuty
          if [ -n "$PAGERDUTY_KEY" ]; then
            python scripts/send_pagerduty_alert.py \
              --severity critical \
              --cve "$CVE" \
              --message "CRITICAL CVE affecting ${{ steps.assess.outputs.affected_count }} repos"
          fi

      - name: Create incident tracking issue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CVE: ${{ github.event.inputs.cve || github.event.client_payload.cve }}
        run: |
          gh issue create \
            --title "ðŸš¨ EMERGENCY: $CVE" \
            --label "security,critical,incident" \
            --body "$(cat impact-assessment.json | python scripts/format_incident_report.py)"

      - name: Upload assessment
        uses: actions/upload-artifact@v4.6.2
        with:
          name: emergency-assessment-${{ github.event.inputs.cve }}
          path: impact-assessment.json
