#!/usr/bin/env python3
"""Auto-create GitHub issues for security findings."""

import json
from pathlib import Path
from typing import Any
import os
from github import Github, GithubException

class IssueCreator:
    """Create GitHub issues from security findings."""
    
    SEVERITY_LABELS = {
        "critical": ["security", "critical", "P0"],
        "high": ["security", "high", "P1"],
        "medium": ["security", "medium", "P2"],
        "low": ["security", "low", "P3"],
    }
    
    ISSUE_TEMPLATE = """
## Security Finding

**Severity:** {severity}
**Tool:** {tool}
**CWE:** {cwe}
**OWASP:** {owasp}

### Description
{description}

### Location
**File:** `{file_path}`
**Lines:** {start_line}-{end_line}
```{language}
{code_snippet}
```

### Remediation
{remediation}

### References
{references}

---
*Auto-generated by Security Central*
*Finding ID: `{finding_id}`*
*Detected: {timestamp}*
"""
    
    def __init__(self, github_token: str):
        self.gh = Github(github_token)
        
    def create_issues_from_sarif(
        self,
        repo_full_name: str,
        sarif_path: Path,
        severity_threshold: str = "high"
    ) -> list[str]:
        """Create issues from SARIF findings."""
        
        with open(sarif_path) as f:
            sarif = json.load(f)
        
        repo = self.gh.get_repo(repo_full_name)
        created_issues = []
        
        for run in sarif.get("runs", []):
            tool_name = run.get("tool", {}).get("driver", {}).get("name", "Unknown")
            
            for result in run.get("results", []):
                severity = self._get_severity(result)
                
                # Skip if below threshold
                if not self._meets_threshold(severity, severity_threshold):
                    continue
                
                # Check if issue already exists
                finding_id = self._generate_finding_id(result)
                if self._issue_exists(repo, finding_id):
                    continue
                
                # Create issue
                issue_body = self._format_issue(result, tool_name, finding_id)
                title = self._generate_title(result)
                labels = self.SEVERITY_LABELS.get(severity, ["security"])
                
                try:
                    issue = repo.create_issue(
                        title=title,
                        body=issue_body,
                        labels=labels
                    )
                    created_issues.append(issue.html_url)
                    print(f"✓ Created issue: {issue.html_url}")
                except GithubException as e:
                    print(f"✗ Failed to create issue: {e}")
        
        return created_issues
    
    def _get_severity(self, result: dict[str, Any]) -> str:
        """Extract severity from SARIF result."""
        level = result.get("level", "warning")
        severity_map = {
            "error": "high",
            "warning": "medium",
            "note": "low"
        }
        
        # Check if rule metadata has severity
        rule_severity = result.get("properties", {}).get("security-severity")
        if rule_severity:
            score = float(rule_severity)
            if score >= 9.0:
                return "critical"
            elif score >= 7.0:
                return "high"
            elif score >= 4.0:
                return "medium"
            else:
                return "low"
        
        return severity_map.get(level, "medium")
    
    def _meets_threshold(self, severity: str, threshold: str) -> bool:
        """Check if severity meets threshold."""
        hierarchy = ["low", "medium", "high", "critical"]
        return hierarchy.index(severity) >= hierarchy.index(threshold)
    
    def _generate_finding_id(self, result: dict[str, Any]) -> str:
        """Generate unique ID for finding."""
        rule_id = result.get("ruleId", "unknown")
        location = result.get("locations", [{}])[0]
        uri = location.get("physicalLocation", {}).get("artifactLocation", {}).get("uri", "")
        region = location.get("physicalLocation", {}).get("region", {})
        line = region.get("startLine", 0)
        
        return f"{rule_id}_{uri}_{line}".replace("/", "_")
    
    def _issue_exists(self, repo, finding_id: str) -> bool:
        """Check if issue already exists for this finding."""
        query = f"repo:{repo.full_name} is:issue {finding_id} in:body"
        results = self.gh.search_issues(query)
        return results.totalCount > 0
    
    def _generate_title(self, result: dict[str, Any]) -> str:
        """Generate issue title."""
        rule_id = result.get("ruleId", "Security Issue")
        message = result.get("message", {}).get("text", "")
        return f"[Security] {rule_id}: {message[:80]}"
    
    def _format_issue(self, result: dict[str, Any], tool_name: str, finding_id: str) -> str:
        """Format issue body from SARIF result."""
        from datetime import datetime
        
        return self.ISSUE_TEMPLATE.format(
            severity=self._get_severity(result),
            tool=tool_name,
            cwe=result.get("properties", {}).get("tags", ["N/A"])[0],
            owasp="N/A",  # Extract if available
            description=result.get("message", {}).get("text", "No description"),
            file_path=self._get_file_path(result),
            start_line=self._get_start_line(result),
            end_line=self._get_end_line(result),
            language="python",  # Detect from file extension
            code_snippet=self._get_code_snippet(result),
            remediation=result.get("message", {}).get("markdown", "See documentation"),
            references=self._get_references(result),
            finding_id=finding_id,
            timestamp=datetime.utcnow().isoformat()
        )
    
    def _get_file_path(self, result: dict[str, Any]) -> str:
        location = result.get("locations", [{}])[0]
        return location.get("physicalLocation", {}).get("artifactLocation", {}).get("uri", "unknown")
    
    def _get_start_line(self, result: dict[str, Any]) -> int:
        location = result.get("locations", [{}])[0]
        return location.get("physicalLocation", {}).get("region", {}).get("startLine", 0)
    
    def _get_end_line(self, result: dict[str, Any]) -> int:
        location = result.get("locations", [{}])[0]
        return location.get("physicalLocation", {}).get("region", {}).get("endLine", 0)
    
    def _get_code_snippet(self, result: dict[str, Any]) -> str:
        location = result.get("locations", [{}])[0]
        return location.get("physicalLocation", {}).get("region", {}).get("snippet", {}).get("text", "")
    
    def _get_references(self, result: dict[str, Any]) -> str:
        refs = result.get("properties", {}).get("helpUri", "")
        if refs:
            return f"- {refs}"
        return "No references available"

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument("--repo", required=True, help="owner/repo")
    parser.add_argument("--sarif", type=Path, required=True)
    parser.add_argument("--severity", default="high", choices=["low", "medium", "high", "critical"])
    args = parser.parse_args()
    
    token = os.getenv("GITHUB_TOKEN")
    if not token:
        raise ValueError("GITHUB_TOKEN environment variable required")
    
    creator = IssueCreator(token)
    issues = creator.create_issues_from_sarif(args.repo, args.sarif, args.severity)
    
    print(f"\n✓ Created {len(issues)} issues")
